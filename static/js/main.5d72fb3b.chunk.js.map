{"version":3,"sources":["data/constants.js","components/game_info.js","utils.js","components/game.js","components/shared/modal.js","utils/localStorage.js","components/settings.js","hooks/game.js","components/app.js","reportWebVitals.js","index.js"],"names":["COLORS","Container","styled","div","GameInfo","_ref","timeRemaining","state","useContext","GameContext","_jsxs","children","currentScore","goalScore","random","min","max","Math","ceil","floor","degToRad","degrees","PI","useStableCB","callback","values","self","useRef","handler","_len","arguments","length","args","Array","_key","current","Game","screenHandle","dispatch","canvasRef","canvas","setCanvas","useState","ctx","setCtx","setTimeRemaining","cursorRef","x","y","targetsRef","stateRef","useEffect","getContext","width","window","innerWidth","height","innerHeight","requestPointerLock","pointerLockChange","lockChangeAlert","document","addEventListener","handleClick","removeEventListener","exitPointerLock","t","d3","tickAnimation","stop","screenX","screenY","targets","newTargets","filter","_ref2","radius","sqrt","pow","type","payload","inc","drawCanvas","fillStyle","fillRect","forEach","_ref3","beginPath","arc","fill","closePath","drawTargets","timeElapsed","_ref4","targetSize","spawnTarget","timerSec","timer","toFixed","pointerLockElement","mozPointerLockElement","m","mouseMoveMemo","e","_ref5","dx","movementX","sensitivity","dy","movementY","_jsx","ref","Background","Modal","close","_Fragment","createPortal","onClick","body","initialState","save","key","value","localStorage","setItem","fetch","getItem","SettingsModal","isOpen","step","onChange","event","target","status","INITIAL_GAME_STATE","level","reducer","action","React","createContext","App","useReducer","settings","setSettings","Provider","startGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d72fb3b.chunk.js","sourcesContent":["export const COLORS = {\n  darkYellow: '#F6BE00',\n  darkRed: '#8b0000',\n  metallicGray: '#A8A9AD',\n  omYellow: '#FACE26',\n  omOrange: '#FD871A',\n  omSand: '#F0E0BE',\n  // TODO: find better colors for HTML defaults\n  common: 'gray',\n  uncommon: 'green',\n  rare: 'blue',\n  epic: 'purple',\n  legendary: 'yellow',\n};\n\nexport const MAX_NUM_DMG_COUNT_LENGTH = 3;","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\nimport { COLORS } from '../data/constants';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 116px;\n  background-color: #333;\n  color: white;\n  padding: 12px 24px 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst GameInfo = ({ timeRemaining }) => {\n  const { state } = useContext(GameContext);\n\n  return (\n    <Container>\n      <h1>Time Left: {timeRemaining}</h1>\n      <h1>Current Score: {state.currentScore} / {state.goalScore}</h1>\n    </Container>\n  );\n};\n\nexport default GameInfo;","import { useRef } from 'react';\n\nexport const random = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport const degToRad = (degrees) => Math.PI / 180 * degrees;\n\nexport const useStableCB = (callback, values) => {\n  const self = useRef({\n    values: values,\n    handler: (...args) => {\n      return callback(...args, self.current.values)\n    }\n  });\n  self.current.values = values\n  return self.current.handler\n}","import React, { useEffect, useContext, useState, useRef } from 'react';\nimport styled from '@emotion/styled';\nimport * as d3 from 'd3-timer';\n\nimport { GameContext } from './app';\nimport GameInfo from './game_info';\nimport { degToRad, random, useStableCB } from '../utils';\nimport { COLORS } from '../data/constants';\n\nconst RADIUS = 5;\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst Game = ({ screenHandle }) => {\n  const { state, dispatch } = useContext(GameContext);\n  const canvasRef = useRef(null);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  const [timeRemaining, setTimeRemaining] = useState();\n  const cursorRef = useRef({ x: 500, y: 500 });\n  const targetsRef = useRef([]);\n  const stateRef = useRef(state);\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    stateRef.current = state; \n  }, [state])\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setCanvas(canvas);\n    const ctx = canvasRef.current.getContext('2d');\n    setCtx(ctx);\n    canvasRef.current.width = window.innerWidth;\n    canvasRef.current.height = window.innerHeight;\n    canvas.requestPointerLock();\n    const pointerLockChange = () => lockChangeAlert(canvas)\n    document.addEventListener('pointerlockchange', pointerLockChange, false);\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('pointerlockchange', pointerLockChange);\n      document.removeEventListener('click', handleClick);\n      document.exitPointerLock();\n      // screenHandle.exit();\n    };\n  }, [])\n\n  useEffect(() => {\n    let t;\n    if (canvas && ctx) {\n      t = d3.timer(tickAnimation)\n    }\n    return () => t && t.stop()\n  }, [canvas, ctx]);\n\n  const handleClick = () => {\n    const screenX = cursorRef.current.x;\n    const screenY = cursorRef.current.y;\n    const targets = targetsRef.current;\n    const newTargets = targets.filter(({ x, y, radius }) =>\n      // Filter out if target clicked inside\n      Math.sqrt(Math.pow(x - screenX, 2), Math.pow(y - screenY, 2)) >= radius + RADIUS);\n\n    if (newTargets.length === targets.length) {\n      // Player loses points on missing target\n      dispatch({ type: 'hitTarget', payload: { inc: -1 }})\n    } else {\n      dispatch({ type: 'hitTarget', payload: { inc: 1 }})\n    }\n    targetsRef.current = newTargets;\n  }\n\n  const spawnTarget = (canvas) => {\n    if (!targetsRef.current.length && canvas) {\n      const { targetSize } = state;\n      const { width, height } = canvas;\n      const x = random(width / 2 - width / 4, width - targetSize - width / 2);\n      const y = random(height / 2 - height / 4, height - targetSize - height / 2);\n      targetsRef.current = [{ x, y, radius: targetSize }];\n    }\n  }\n\n  const drawTargets = (ctx) => {\n    targetsRef.current.forEach(({ x, y, radius }) => {\n      ctx.fillStyle = COLORS.omSand;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, degToRad(360), true);\n      ctx.fill();\n      ctx.closePath();\n    });\n  };\n\n  const drawCanvas = (canvas, ctx) => {\n    const { width, height } = canvas;\n    ctx.fillStyle = 'grey';\n    ctx.fillRect(0, 0, width, height);\n\n    drawTargets(ctx);\n\n    // Cursor\n    ctx.fillStyle = \"#f00\";\n    ctx.beginPath();\n    ctx.arc(cursorRef.current.x, cursorRef.current.y, RADIUS, 0, degToRad(360), true);\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const tickAnimation = useStableCB((timeElapsed, [canvas, ctx]) => {\n    if (!canvas || !ctx) return;\n\n    spawnTarget(canvas);\n    drawCanvas(canvas, ctx);\n\n    // Handle timer state in game loop\n    const timerSec = (state.timer - timeElapsed / 1000).toFixed(2);\n    if (timerSec <= 0) {\n      return dispatch({ type: 'endGame' });\n    }\n    setTimeRemaining(timerSec);\n\n  }, [canvas, ctx]);\n\n  const lockChangeAlert = (canvas) => {\n    if (document.pointerLockElement === canvas ||\n        document.mozPointerLockElement === canvas) {\n      canvas.addEventListener(\"mousemove\", m => mouseMoveMemo(m), false);\n    }\n  }\n\n  const mouseMoveMemo = useStableCB((e, [cursorRef, canvas]) => {\n    if (!canvas) return;\n    // Edge detection\n    const { x, y } = cursorRef.current;\n    if (x > canvas.width) {\n      cursorRef.current = { x: canvas.width - 1, y }\n      return\n    }\n    if (y > canvas.height) {\n      cursorRef.current = { x, y: canvas.height - 1 }\n      return\n    }  \n    if (x < 0) {\n      cursorRef.current = { x: 1, y }\n      return\n    }\n    if (y < 0) {\n      cursorRef.current = { x, y: 1 }\n      return\n    }\n    const dx = e.movementX * (state.sensitivity || 1);\n    const dy = e.movementY * (state.sensitivity || 1);\n    cursorRef.current = { x: x + dx, y: y + dy }\n  }, [cursorRef, canvas]);\n\n  return (\n    <Container>\n      <GameInfo timeRemaining={timeRemaining} />\n      <canvas ref={canvasRef}>\n      </canvas>\n    </Container>\n  );\n}\n\nexport default Game;\n","import { createPortal } from \"react-dom\";\nimport styled from '@emotion/styled';\n\nconst Background = styled.div`\n  background-color: black;\n  opacity: .4;\n  height: 100vh;\n  width: 100vw;\n  z-index: 1;\n  position: fixed;\n  top: 0;\n  left: 0;\n`;\n\nconst Container = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  background-color: white;\n  padding: 24px;\n  border-radius: 4px;\n  opacity: 1;\n`;\n\nexport const Modal = ({ children, close }) => {\n  return (\n    <>\n      {createPortal(\n        <>\n        <Container>\n          {children}\n        </Container>\n        <Background onClick={close}></Background>\n        </>, document.body)}\n    </>\n  )\n}","const initialState = {\n  sensitivity: 0.4,\n  targetSize: 8,\n}\n\n// Key can be sensitivity, targetSize, etc.\nexport const save = (key, value) => localStorage.setItem(key, value);\nexport const fetch = (key) => localStorage.getItem(key) || initialState[key];","import { useEffect, useContext } from 'react';\n\nimport { Modal } from \"./shared/modal\";\nimport { GameContext } from './app';\n\nimport { save } from '../utils/localStorage';\n\nexport const SettingsModal = ({ isOpen, close }) => {\n  const { state, dispatch } = useContext(GameContext);\n\n  useEffect(() => {\n    const { sensitivity, targetSize } = state;\n    if (sensitivity) {\n      save('sensitivity', sensitivity);\n    }\n    if (targetSize) {\n      save('targetSize', targetSize);\n    }\n  }, [state.sensitivity, state.targetSize]);\n\n  return (\n    isOpen ? <Modal close={close}>\n      <h1>Settings</h1>\n      <div>\n        Sensitivity: &nbsp;\n        <input \n          type=\"number\"\n          step=\"0.01\"\n          value={state.sensitivity} onChange={(event) =>\n            dispatch({ type: 'changeSettings', payload: { sensitivity: event.target.value } })\n          }\n        />\n      </div>\n      <div>\n        Target Size (in px): &nbsp;\n        <input \n          type=\"number\"\n          step=\"1\"\n          value={state.targetSize} onChange={(event) =>\n            dispatch({ type: 'changeSettings', payload: { targetSize: event.target.value } })\n          }\n        />\n      </div>\n      <br />\n      <button onClick={close}>Save</button>\n    </Modal> : <></>\n  );\n}","import { useReducer } from 'react';\n\nimport { fetch } from '../utils/localStorage';\n\nconst initialState = {\n  status: 'INITIAL',\n  sensitivity: fetch('sensitivity'),\n  targetSize: fetch('targetSize'),\n};\n\nconst INITIAL_GAME_STATE = {\n  timer: 30,\n  currentScore: 0,\n  goalScore: 30,\n  level: 1,\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'changeSettings': {\n      return {\n        ...state,\n        sensitivity: action.payload.sensitivity || state.sensitivity,\n        targetSize: action.payload.targetSize || state.targetSize,\n      }\n    }\n    case 'returnToHomeScreen': {\n      return {\n        status: 'INITIAL',\n      }\n    }\n    case 'startGame':\n      return {\n        ...state,\n        status: 'RUNNING',\n        ...INITIAL_GAME_STATE,\n      }\n    // In-game actions\n    case 'hitTarget':\n      return {\n        ...state,\n        currentScore: state.currentScore + action.payload.inc,\n      }\n    default:\n      return state\n  }\n}\n\nexport const useGameReducer = () => useReducer(reducer, initialState);","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\n\nimport Game from './game';\nimport { SettingsModal } from './settings';\n\nimport { useGameReducer } from '../hooks/game';\n\nconst Container = styled.div`\n`;\n\nexport const GameContext = React.createContext();\n\nconst App = () => {\n  const [state, dispatch] = useGameReducer();\n  const [settings, setSettings] = useState(false);\n\n  const startGame = () => {\n    dispatch({ type: 'startGame', payload: { timer: 60 } });\n  }\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Container>\n        {state.status === 'INITIAL' &&\n          <>\n            <button onClick={startGame}>Start Game</button>\n            <button onClick={() => setSettings(true)}>Settings</button>\n            <SettingsModal isOpen={settings} close={() => setSettings(false)} />\n          </>\n        }\n        {state.status === 'RUNNING' && <Game />}\n        {state.status === 'COMPLETED' && \n          <>\n            Game Over\n          </>}\n      </Container>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}